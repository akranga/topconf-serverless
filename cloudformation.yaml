  AWSTemplateFormatVersion: '2010-09-09'
  Metadata: 
    License: Apache-2.0
  Description: |
    AWS CloudFormation that creates number of lambda functions IAM and DynamoDB.
    Please beware you will be charged by AWS uppon provisioning of this stack
  Parameters:
    BasePath:
      Type: String
      Default: api
    DnsHostedZoneId:
      Type: String
      Default: Z21R9GSZA1Y8OD
    LambdaCodeS3Bucket:
      Description: S3 bucket with initial lambda source code
      Type: String
      Default: 'topconf.devops.delivery'
      MinLength: '1'
      MaxLength: '2048'
      ConstraintDescription: must contain valid domain name
    LambdaCodeZipFile:
      Description: zip file with lambda code
      Type: String
      Default: 'lambda.zip'
      MinLength: '1'
      MaxLength: '2048'
      ConstraintDescription: must contain valid domain name
    DomainName:
      Type: String
      Default: topconf.devops.delivery
    CertificateArn:
      Type: String
      Default: arn:aws:acm:us-east-1:077240424621:certificate/72d74ef2-d2e7-4eb0-94f4-4693e772432e
  Resources:
    MyLambdaFunction:
      Type: "AWS::Lambda::Function"
      Properties:
        FunctionName: 
          Fn::Join:
          - '_'
          - - !Ref AWS::StackName
            - 'lambda'
        Handler: "main.handler"
        Role: 
          Fn::GetAtt: 
          - "LambdaExecutionRole"
          - "Arn"
        Code: 
          S3Bucket: !Ref 'LambdaCodeS3Bucket'
          S3Key: !Ref 'LambdaCodeZipFile'
        Runtime: "python2.7"
        MemorySize: '128'
        Timeout: "60"
        TracingConfig:
          Mode: "Active"
        Environment:
          Variables:
            STACK_NAME: !Ref 'AWS::StackName'
            DYNAMO_TABLE: !Ref 'DynamoTable'

    # IAM Role to allow lambda execution on certain resources
    LambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
            Action:
            - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              - lambda:*
              - xray:PutTraceSegments
              - xray:PutTelemetryRecords
              - dynamodb:*
              Resource: '*'
    # LambdaPermission:
    #   Type: "AWS::Lambda::Permission"
    #   Properties: 
    #     Action: "lambda:invokeFunction"
    #     FunctionName: !GetAtt 
    #     - MyLambdaFunction
    #     - Arn
    #     Principal: "apigateway.amazonaws.com"
    #     SourceArn: 
    #       Fn::Join:
    #       - ''
    #       - - 'arn:aws:execute-api:'
    #         - !Ref AWS::Region
    #         - ':'
    #         - !Ref AWS::AccountId
    #         - ':'
    #         - !Ref RestApi
    #         - '/*'

    # Dynamo DB Table will act as the backend for us
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: 'Num'
          AttributeType: 'S'
        KeySchema:
        - AttributeName: 'Num'
          KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: '5'
          WriteCapacityUnits: '10'
        # We will also use custom projection to hide True identities
        GlobalSecondaryIndexes:
        - IndexName: "Masked"
          KeySchema: 
          - AttributeName: 'Num'
            KeyType: HASH
          Projection: 
            NonKeyAttributes : ["Identity","Status"]
            ProjectionType: "INCLUDE"
          ProvisionedThroughput:
            ReadCapacityUnits: '5'
            WriteCapacityUnits: '10'
    RestApi: 
      Type: "AWS::ApiGateway::RestApi"
      Properties: 
        Description: RESTful API
        Name:
          Fn::Join:
            - '.'
            - - !Ref AWS::StackName
              - !Ref DomainName

    # MyCertificate:
    #   Type: 'AWS::CertificateManager::Certificate'
    #   Properties:
    #     DomainName:
    #       Fn::Join:
    #         - '.'
    #         - - !Ref AWS::StackName
    #           - !Ref DomainName
    MyDomainName:
      Type: 'AWS::ApiGateway::DomainName'
      Properties:
        CertificateArn: !Ref CertificateArn
        DomainName:
          Fn::Join:
            - '.'
            - - !Ref AWS::StackName
              - !Ref DomainName
    MyMapping:
      Type: 'AWS::ApiGateway::BasePathMapping'
      Properties:
        BasePath: !Ref BasePath
        DomainName: !Ref MyDomainName
        RestApiId: !Ref RestApi

    # R53DomainName:
    #   Type: AWS::Route53::RecordSet
    #   Properties:
    #     AliasTarget:
    #       DNSName:
    #         Fn::Join:
    #         - '.'
    #         - - !Ref AWS::StackName
    #           - !Ref DomainName
    #         # Fn::GetAtt:
    #         # - CustomDomainName
    #         # - distributionDomainName
    #       HostedZoneId: ZJ5UAJN8Y3Z2Q
    #     HostedZoneId: !Ref DnsHostedZoneId
    #     Name: !Ref DomainName
    #     Type: A


  Outputs:
    MyLambdaFunction:
      Value: 
        Fn::GetAtt: 
          - "MyLambdaFunction"
          - "Arn"
      Description: My Lambda function zip file
